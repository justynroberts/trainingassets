- defaultTab: output
  description: "Automatic Service Restart on remote Node\n# How this Job Works\n1.\
    \ Takes a PagerDuty incident ID as an input option. This can be provided via Webhook\
    \ or manually. \n2. This job restarts an Apache Service and updates the PagerDuty\
    \ incident notes with execution details \n\n\nUses [PagerDuty Cloud-Demo](https://pdt-clouddemo.pagerduty.com)\
    \ for a target instance .\n\nSee the `ReadMe` for how to demo this Runbook\n---\n\
    ### How To Demo This Runbook\n1. This job requires a PagerDuty incident ID\n3.\
    \ Aftering entering the **pd_incident_id** , click on the button [Run-Job-Now]\n\
    3. This job has `safe-execution` and can be run multiple times.\n\nusername: **fieldengineers@example.com**\
    \ | password: **Password123**\n\n"
  executionEnabled: false
  group: ‚öôÔ∏è Operations Team/Automated Incident Response
  id: 13df8003-28d9-4ada-b76f-fc2ebba66781
  loglevel: INFO
  name: Service Failure - Automated Response
  nodeFilterEditable: false
  nodefilters:
    dispatch:
      excludePrecedence: true
      keepgoing: true
      rankOrder: ascending
      successOnEmptyNodeFilter: false
      threadcount: '1'
    filter: 'name: Self-Hosted-Utiilty2 '
  nodesSelectedByDefault: true
  options:
  - description: "Ordinarily this would be passed as part of the incident payload.\
      \  \nIt can be ommitted for testing.  "
    label: Incident ID
    name: pd_incident_id
  - description: "Use this option to choose which service to monitor and restart..\n\
      Examples include. \n- mysql\n- nginx\n\nOthers can be passed as part of the\
      \ Incident Payload. "
    label: Select A service
    name: service
    required: true
    value: mysql
    values:
    - mysql
    - nginx
    valuesListDelimiter: ','
  plugins:
    ExecutionLifecycle: {}
  runnerSelector:
    filter: US-WEST
    runnerFilterMode: TAGS
    runnerFilterType: TAG_FILTER_AND
  scheduleEnabled: true
  schedules: []
  sequence:
    commands:
    - configuration:
        text: Starting  ${option.service} Service Restart via PD Notification
      nodeStep: false
      type: progress-badge
    - configuration:
        incident_id: ${option.pd_incident_id}
        note: Automation job ${job.name} initiated
      description: Update incident
      errorhandler:
        exec: echo "Unable to update PagerDuty.  Please check the API Keys are correct"
        keepgoingOnSuccess: true
      nodeStep: false
      type: pd-note-step
    - description: Check Service Status
      exec: systemctl status ${unquotedoption.service} | cat
      plugins:
        LogFilter:
        - config:
            hideOutput: 'false'
            logData: 'true'
            name: status
            regex: '.*Active: (\w+).*'
          type: key-value-data-multilines
    - configuration:
        export: status
        group: export
        value: ${data.status*}
      description: Export service status to global variable
      nodeStep: false
      type: export-var
    - configuration:
        incident_id: ${option.pd_incident_id}
        note: ${option.service} service status is ${export.status}
      description: update pd ticket with service status
      errorhandler:
        exec: echo "Unable to update PagerDuty.  Please check the API Keys are correctly
          configured"
        keepgoingOnSuccess: true
      nodeStep: false
      type: pd-note-step
    - configuration:
        incident_id: ${option.pd_incident_id}
        resolution: ${option.service}  is active. resolving incident.
        status: resolved
      description: resolve PD incident.
      errorhandler:
        exec: echo "Unable to update PagerDuty.  Please check the API Keys are correctly
          configured"
        keepgoingOnSuccess: true
      nodeStep: false
      type: pd-update-incident-step
    - configuration:
        text: service is active - exiting job
      nodeStep: false
      type: progress-badge
    - description: Attempt Service Restart
      exec: sudo systemctl restart ${option.service}
    - description: Wait 10 Seconds for Service to start
      exec: sleep 10s
    - description: Check Service Status
      exec: systemctl status ${option.service}
      plugins:
        LogFilter:
        - config:
            hideOutput: 'false'
            logData: 'true'
            name: new_status
            regex: '.*Active: (\w+).*'
          type: key-value-data-multilines
    - configuration:
        export: new_status
        group: export
        value: ${data.new_status*}
      description: set new status as global variable
      nodeStep: false
      type: export-var
    - configuration:
        incident_id: ${option.pd_incident_id}
        note: Successful service [${option.service}]restart via Automation
      description: successful restart
      errorhandler:
        exec: echo "Unable to update PagerDuty.  Please check the API Keys are correctly
          configured"
        keepgoingOnSuccess: true
      nodeStep: false
      type: pd-note-step
    - configuration:
        text: Successful Restart
      nodeStep: false
      type: progress-badge
    - configuration:
        incident_id: ${option.pd_incident_id}
        resolution: Automation Resolved Incident. üëçüèª
        status: resolved
      description: resolving incident.
      errorhandler:
        exec: echo "Unable to update PagerDuty.  Please check the API Keys are correctly
          configured"
        keepgoingOnSuccess: true
      nodeStep: false
      type: pd-update-incident-step
    - configuration:
        incident_id: ${option.pd_incident_id}
        note: Unsuccessful automated restart for ${option.service}
      description: 'update pd ticket: unsuccessful auto-restart'
      errorhandler:
        exec: echo "Unable to update PagerDuty.  Please check the API Keys are correctly
          configured"
        keepgoingOnSuccess: true
      nodeStep: false
      type: pd-note-step
    - configuration:
        text: Unsuccessful Restart for ${option.service}
      nodeStep: false
      type: progress-badge
    keepgoing: false
    pluginConfig:
      WorkflowStrategy:
        ruleset:
          rules: |
            # Autogenerated Directives
            [1] run-at-start
            [2] run-after:1
            [3] run-after:2
            [4] run-after:3
            [5] run-after:4
            [6] run-after:5
            [7] run-after:6
            [8] run-after:5
            [9] run-after:8
            [10] run-after:9
            [11] run-after:10
            [12] run-after:11
            [13] run-after:12
            [14] run-after:13
            [15] run-after:11
            [16] run-after:15

            # Autogenerated Conditions
            [6] if:export.status==active
            [7] if:export.status==active
            [8] if:export.status!=active
            [9] if:export.status!=active
            [10] if:export.status!=active
            [11] if:export.status!=active
            [12] if:export.new_status==active if:export.status!=active
            [13] if:export.new_status==active if:export.status!=active
            [14] if:export.new_status==active if:export.status!=active
            [15] if:export.new_status!=active if:export.status!=active
            [16] if:export.new_status!=active if:export.status!=active
    strategy: ruleset
  tags: 'apache,pagerduty'
  uuid: 13df8003-28d9-4ada-b76f-fc2ebba66781

